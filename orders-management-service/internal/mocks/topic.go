// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "gitlab.com/projetos/orderbook/orders-management-service/internal/model"
)

// ITopicService is an autogenerated mock type for the ITopicService type
type ITopicService struct {
	mock.Mock
}

type ITopicService_Expecter struct {
	mock *mock.Mock
}

func (_m *ITopicService) EXPECT() *ITopicService_Expecter {
	return &ITopicService_Expecter{mock: &_m.Mock}
}

// SendEvents provides a mock function with given fields: orderExecuted
func (_m *ITopicService) SendEvents(orderExecuted *model.OrderExecutedBody) error {
	ret := _m.Called(orderExecuted)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.OrderExecutedBody) error); ok {
		r0 = rf(orderExecuted)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITopicService_SendEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvents'
type ITopicService_SendEvents_Call struct {
	*mock.Call
}

// SendEvents is a helper method to define mock.On call
//   - orderExecuted *model.OrderExecutedBody
func (_e *ITopicService_Expecter) SendEvents(orderExecuted interface{}) *ITopicService_SendEvents_Call {
	return &ITopicService_SendEvents_Call{Call: _e.mock.On("SendEvents", orderExecuted)}
}

func (_c *ITopicService_SendEvents_Call) Run(run func(orderExecuted *model.OrderExecutedBody)) *ITopicService_SendEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.OrderExecutedBody))
	})
	return _c
}

func (_c *ITopicService_SendEvents_Call) Return(_a0 error) *ITopicService_SendEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ITopicService_SendEvents_Call) RunAndReturn(run func(*model.OrderExecutedBody) error) *ITopicService_SendEvents_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewITopicService interface {
	mock.TestingT
	Cleanup(func())
}

// NewITopicService creates a new instance of ITopicService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITopicService(t mockConstructorTestingTNewITopicService) *ITopicService {
	mock := &ITopicService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
