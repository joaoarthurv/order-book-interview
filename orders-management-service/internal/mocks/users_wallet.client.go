// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "gitlab.com/projetos/orderbook/orders-management-service/internal/model"
)

// IUsersWalletClient is an autogenerated mock type for the IUsersWalletClient type
type IUsersWalletClient struct {
	mock.Mock
}

type IUsersWalletClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IUsersWalletClient) EXPECT() *IUsersWalletClient_Expecter {
	return &IUsersWalletClient_Expecter{mock: &_m.Mock}
}

// UserWalletCheck provides a mock function with given fields: userWalletCheck, path
func (_m *IUsersWalletClient) UserWalletCheck(userWalletCheck model.UserWallet, path string) (bool, error) {
	ret := _m.Called(userWalletCheck, path)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(model.UserWallet, string) (bool, error)); ok {
		return rf(userWalletCheck, path)
	}
	if rf, ok := ret.Get(0).(func(model.UserWallet, string) bool); ok {
		r0 = rf(userWalletCheck, path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(model.UserWallet, string) error); ok {
		r1 = rf(userWalletCheck, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUsersWalletClient_UserWalletCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserWalletCheck'
type IUsersWalletClient_UserWalletCheck_Call struct {
	*mock.Call
}

// UserWalletCheck is a helper method to define mock.On call
//   - userWalletCheck model.UserWallet
//   - path string
func (_e *IUsersWalletClient_Expecter) UserWalletCheck(userWalletCheck interface{}, path interface{}) *IUsersWalletClient_UserWalletCheck_Call {
	return &IUsersWalletClient_UserWalletCheck_Call{Call: _e.mock.On("UserWalletCheck", userWalletCheck, path)}
}

func (_c *IUsersWalletClient_UserWalletCheck_Call) Run(run func(userWalletCheck model.UserWallet, path string)) *IUsersWalletClient_UserWalletCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.UserWallet), args[1].(string))
	})
	return _c
}

func (_c *IUsersWalletClient_UserWalletCheck_Call) Return(_a0 bool, _a1 error) *IUsersWalletClient_UserWalletCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUsersWalletClient_UserWalletCheck_Call) RunAndReturn(run func(model.UserWallet, string) (bool, error)) *IUsersWalletClient_UserWalletCheck_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIUsersWalletClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUsersWalletClient creates a new instance of IUsersWalletClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUsersWalletClient(t mockConstructorTestingTNewIUsersWalletClient) *IUsersWalletClient {
	mock := &IUsersWalletClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
