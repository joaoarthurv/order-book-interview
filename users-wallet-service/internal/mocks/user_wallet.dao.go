// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	model "gitlab.com/projetos/orderbook/users-wallet-service/internal/model"
)

// IUserWalletDao is an autogenerated mock type for the IUserWalletDao type
type IUserWalletDao struct {
	mock.Mock
}

type IUserWalletDao_Expecter struct {
	mock *mock.Mock
}

func (_m *IUserWalletDao) EXPECT() *IUserWalletDao_Expecter {
	return &IUserWalletDao_Expecter{mock: &_m.Mock}
}

// GetUserWalletByUserIdAndProductType provides a mock function with given fields: userId, productType
func (_m *IUserWalletDao) GetUserWalletByUserIdAndProductType(userId string, productType string) (*model.UserWallet, error) {
	ret := _m.Called(userId, productType)

	var r0 *model.UserWallet
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.UserWallet, error)); ok {
		return rf(userId, productType)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.UserWallet); ok {
		r0 = rf(userId, productType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserWallet)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, productType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserWalletDao_GetUserWalletByUserIdAndProductType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWalletByUserIdAndProductType'
type IUserWalletDao_GetUserWalletByUserIdAndProductType_Call struct {
	*mock.Call
}

// GetUserWalletByUserIdAndProductType is a helper method to define mock.On call
//   - userId string
//   - productType string
func (_e *IUserWalletDao_Expecter) GetUserWalletByUserIdAndProductType(userId interface{}, productType interface{}) *IUserWalletDao_GetUserWalletByUserIdAndProductType_Call {
	return &IUserWalletDao_GetUserWalletByUserIdAndProductType_Call{Call: _e.mock.On("GetUserWalletByUserIdAndProductType", userId, productType)}
}

func (_c *IUserWalletDao_GetUserWalletByUserIdAndProductType_Call) Run(run func(userId string, productType string)) *IUserWalletDao_GetUserWalletByUserIdAndProductType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IUserWalletDao_GetUserWalletByUserIdAndProductType_Call) Return(_a0 *model.UserWallet, _a1 error) *IUserWalletDao_GetUserWalletByUserIdAndProductType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserWalletDao_GetUserWalletByUserIdAndProductType_Call) RunAndReturn(run func(string, string) (*model.UserWallet, error)) *IUserWalletDao_GetUserWalletByUserIdAndProductType_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUserWallet provides a mock function with given fields: userWallet
func (_m *IUserWalletDao) SaveUserWallet(userWallet *model.UserWallet) error {
	ret := _m.Called(userWallet)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserWallet) error); ok {
		r0 = rf(userWallet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUserWalletDao_SaveUserWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUserWallet'
type IUserWalletDao_SaveUserWallet_Call struct {
	*mock.Call
}

// SaveUserWallet is a helper method to define mock.On call
//   - userWallet *model.UserWallet
func (_e *IUserWalletDao_Expecter) SaveUserWallet(userWallet interface{}) *IUserWalletDao_SaveUserWallet_Call {
	return &IUserWalletDao_SaveUserWallet_Call{Call: _e.mock.On("SaveUserWallet", userWallet)}
}

func (_c *IUserWalletDao_SaveUserWallet_Call) Run(run func(userWallet *model.UserWallet)) *IUserWalletDao_SaveUserWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.UserWallet))
	})
	return _c
}

func (_c *IUserWalletDao_SaveUserWallet_Call) Return(_a0 error) *IUserWalletDao_SaveUserWallet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserWalletDao_SaveUserWallet_Call) RunAndReturn(run func(*model.UserWallet) error) *IUserWalletDao_SaveUserWallet_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIUserWalletDao interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserWalletDao creates a new instance of IUserWalletDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserWalletDao(t mockConstructorTestingTNewIUserWalletDao) *IUserWalletDao {
	mock := &IUserWalletDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
